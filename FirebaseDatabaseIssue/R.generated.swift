//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Forgot Password
      ///
      /// Key: LoginVC.forgotPasswordButton.title
      ///
      /// Locales: en
      var loginVCForgotPasswordButtonTitle: RswiftResources.StringResource { .init(key: "LoginVC.forgotPasswordButton.title", tableName: "Localizable", source: source, developmentValue: "Forgot Password", comment: nil) }

      /// en translation: Log in
      ///
      /// Key: LoginVC.loginButton.title
      ///
      /// Locales: en
      var loginVCLoginButtonTitle: RswiftResources.StringResource { .init(key: "LoginVC.loginButton.title", tableName: "Localizable", source: source, developmentValue: "Log in", comment: nil) }

      /// en translation: Register
      ///
      /// Key: LoginVC.registerButton.title
      ///
      /// Locales: en
      var loginVCRegisterButtonTitle: RswiftResources.StringResource { .init(key: "LoginVC.registerButton.title", tableName: "Localizable", source: source, developmentValue: "Register", comment: nil) }

      /// en translation: Log in
      ///
      /// Key: LoginVC.title
      ///
      /// Locales: en
      var loginVCTitle: RswiftResources.StringResource { .init(key: "LoginVC.title", tableName: "Localizable", source: source, developmentValue: "Log in", comment: nil) }

      /// en translation: Enter your email
      ///
      /// Key: TextFieldDesignFactory.email.placeholder
      ///
      /// Locales: en
      var textFieldDesignFactoryEmailPlaceholder: RswiftResources.StringResource { .init(key: "TextFieldDesignFactory.email.placeholder", tableName: "Localizable", source: source, developmentValue: "Enter your email", comment: nil) }

      /// en translation: Enter your password
      ///
      /// Key: TextFieldDesignFactory.password.placeholder
      ///
      /// Locales: en
      var textFieldDesignFactoryPasswordPlaceholder: RswiftResources.StringResource { .init(key: "TextFieldDesignFactory.password.placeholder", tableName: "Localizable", source: source, developmentValue: "Enter your password", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var auth: auth { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var loading: loading { .init(bundle: bundle) }

    func auth(bundle: Foundation.Bundle) -> auth {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func loading(bundle: Foundation.Bundle) -> loading {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.auth.validate()
      try self.launchScreen.validate()
      try self.loading.validate()
    }


    /// Storyboard `Auth`.
    struct auth: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Auth"

      var loginVC: RswiftResources.StoryboardViewControllerIdentifier<LoginVC> { .init(identifier: "LoginVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if loginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Auth' as 'LoginVC'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Loading`.
    struct loading: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Loading"

      var loadingVC: RswiftResources.StoryboardViewControllerIdentifier<LoadingVC> { .init(identifier: "LoadingVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if loadingVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loadingVC' could not be loaded from storyboard 'Loading' as 'LoadingVC'.") }
      }
    }
  }
}